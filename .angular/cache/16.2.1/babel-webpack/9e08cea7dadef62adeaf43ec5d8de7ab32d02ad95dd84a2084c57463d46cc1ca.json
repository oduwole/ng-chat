{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { ChatParticipantStatus } from \"../../core/chat-participant-status.enum\";\nimport { MessageCounter } from \"../../core/message-counter\";\nimport { chatParticipantStatusDescriptor } from '../../core/chat-participant-status-descriptor';\nlet NgChatFriendsListComponent = class NgChatFriendsListComponent {\n  constructor() {\n    this.participantsInteractedWith = [];\n    this.onParticipantClicked = new EventEmitter();\n    this.onOptionPromptCanceled = new EventEmitter();\n    this.onOptionPromptConfirmed = new EventEmitter();\n    this.selectedUsersFromFriendsList = [];\n    this.searchInput = '';\n    // Exposes enums and functions for the ng-template\n    this.ChatParticipantStatus = ChatParticipantStatus;\n    this.chatParticipantStatusDescriptor = chatParticipantStatusDescriptor;\n    this.cleanUpUserSelection = () => this.selectedUsersFromFriendsList = [];\n  }\n  ngOnChanges(changes) {\n    if (this.currentActiveOption) {\n      const currentOptionTriggeredBy = this.currentActiveOption && this.currentActiveOption.chattingTo.participant.id;\n      const isActivatedUserInSelectedList = this.selectedUsersFromFriendsList.filter(item => item.id == currentOptionTriggeredBy).length > 0;\n      if (!isActivatedUserInSelectedList) {\n        this.selectedUsersFromFriendsList = this.selectedUsersFromFriendsList.concat(this.currentActiveOption.chattingTo.participant);\n      }\n    }\n  }\n  get filteredParticipants() {\n    if (this.searchInput.length > 0) {\n      // Searches in the friend list by the inputted search string\n      return this.participants.filter(x => x.displayName.toUpperCase().includes(this.searchInput.toUpperCase()));\n    }\n    return this.participants;\n  }\n  isUserSelectedFromFriendsList(user) {\n    return this.selectedUsersFromFriendsList.filter(item => item.id == user.id).length > 0;\n  }\n  unreadMessagesTotalByParticipant(participant) {\n    let openedWindow = this.windows.find(x => x.participant.id == participant.id);\n    if (openedWindow) {\n      return MessageCounter.unreadMessagesTotal(openedWindow, this.userId);\n    } else {\n      let totalUnreadMessages = this.participantsResponse.filter(x => x.participant.id == participant.id && !this.participantsInteractedWith.find(u => u.id == participant.id) && x.metadata && x.metadata.totalUnreadMessages > 0).map(participantResponse => {\n        return participantResponse.metadata.totalUnreadMessages;\n      })[0];\n      return MessageCounter.formatUnreadMessagesTotal(totalUnreadMessages);\n    }\n  }\n  // Toggle friends list visibility\n  onChatTitleClicked() {\n    this.isCollapsed = !this.isCollapsed;\n  }\n  onFriendsListCheckboxChange(selectedUser, isChecked) {\n    if (isChecked) {\n      this.selectedUsersFromFriendsList.push(selectedUser);\n    } else {\n      this.selectedUsersFromFriendsList.splice(this.selectedUsersFromFriendsList.indexOf(selectedUser), 1);\n    }\n  }\n  onUserClick(clickedUser) {\n    this.onParticipantClicked.emit(clickedUser);\n  }\n  onFriendsListActionCancelClicked() {\n    this.onOptionPromptCanceled.emit();\n    this.cleanUpUserSelection();\n  }\n  onFriendsListActionConfirmClicked() {\n    this.onOptionPromptConfirmed.emit(this.selectedUsersFromFriendsList);\n    this.cleanUpUserSelection();\n  }\n};\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"participants\", void 0);\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"participantsResponse\", void 0);\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"participantsInteractedWith\", void 0);\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"windows\", void 0);\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"userId\", void 0);\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"localization\", void 0);\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"shouldDisplay\", void 0);\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"isCollapsed\", void 0);\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"searchEnabled\", void 0);\n__decorate([Input()], NgChatFriendsListComponent.prototype, \"currentActiveOption\", void 0);\n__decorate([Output()], NgChatFriendsListComponent.prototype, \"onParticipantClicked\", void 0);\n__decorate([Output()], NgChatFriendsListComponent.prototype, \"onOptionPromptCanceled\", void 0);\n__decorate([Output()], NgChatFriendsListComponent.prototype, \"onOptionPromptConfirmed\", void 0);\nNgChatFriendsListComponent = __decorate([Component({\n  selector: 'ng-chat-friends-list',\n  templateUrl: './ng-chat-friends-list.component.html',\n  styleUrls: ['./ng-chat-friends-list.component.css'],\n  encapsulation: ViewEncapsulation.None\n})], NgChatFriendsListComponent);\nexport { NgChatFriendsListComponent };","map":{"version":3,"names":["Component","Input","Output","EventEmitter","ViewEncapsulation","ChatParticipantStatus","MessageCounter","chatParticipantStatusDescriptor","NgChatFriendsListComponent","constructor","participantsInteractedWith","onParticipantClicked","onOptionPromptCanceled","onOptionPromptConfirmed","selectedUsersFromFriendsList","searchInput","cleanUpUserSelection","ngOnChanges","changes","currentActiveOption","currentOptionTriggeredBy","chattingTo","participant","id","isActivatedUserInSelectedList","filter","item","length","concat","filteredParticipants","participants","x","displayName","toUpperCase","includes","isUserSelectedFromFriendsList","user","unreadMessagesTotalByParticipant","openedWindow","windows","find","unreadMessagesTotal","userId","totalUnreadMessages","participantsResponse","u","metadata","map","participantResponse","formatUnreadMessagesTotal","onChatTitleClicked","isCollapsed","onFriendsListCheckboxChange","selectedUser","isChecked","push","splice","indexOf","onUserClick","clickedUser","emit","onFriendsListActionCancelClicked","onFriendsListActionConfirmClicked","__decorate","selector","templateUrl","styleUrls","encapsulation","None"],"sources":["D:\\VS Project\\ng-chat\\src\\ng-chat\\components\\ng-chat-friends-list\\ng-chat-friends-list.component.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter, ViewEncapsulation, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { Localization } from '../../core/localization';\r\nimport { IChatOption } from '../../core/chat-option';\r\nimport { ChatParticipantStatus } from \"../../core/chat-participant-status.enum\";\r\nimport { IChatParticipant } from \"../../core/chat-participant\";\r\nimport { User } from \"../../core/user\";\r\nimport { Window } from \"../../core/window\";\r\nimport { ParticipantResponse } from \"../../core/participant-response\";\r\nimport { MessageCounter } from \"../../core/message-counter\";\r\nimport { chatParticipantStatusDescriptor } from '../../core/chat-participant-status-descriptor';\r\n\r\n@Component({\r\n    selector: 'ng-chat-friends-list',\r\n    templateUrl: './ng-chat-friends-list.component.html',\r\n    styleUrls: ['./ng-chat-friends-list.component.css'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgChatFriendsListComponent implements OnChanges {\r\n    constructor() { }\r\n\r\n    @Input()\r\n    public participants: IChatParticipant[];\r\n\r\n    @Input()\r\n    public participantsResponse: ParticipantResponse[];\r\n\r\n    @Input()\r\n    public participantsInteractedWith: IChatParticipant[] = [];\r\n\r\n    @Input()\r\n    public windows: Window[];\r\n\r\n    @Input()\r\n    public userId: any;\r\n\r\n    @Input()\r\n    public localization: Localization;\r\n\r\n    @Input()\r\n    public shouldDisplay: boolean;\r\n\r\n    @Input()\r\n    public isCollapsed: boolean;\r\n\r\n    @Input()\r\n    public searchEnabled: boolean;\r\n\r\n    @Input()\r\n    public currentActiveOption: IChatOption | null;\r\n\r\n    @Output()\r\n    public onParticipantClicked: EventEmitter<IChatParticipant> = new EventEmitter();\r\n\r\n    @Output()\r\n    public onOptionPromptCanceled: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output()\r\n    public onOptionPromptConfirmed: EventEmitter<any> = new EventEmitter();\r\n\r\n    public selectedUsersFromFriendsList: User[] = [];\r\n\r\n    public searchInput: string = '';\r\n\r\n    // Exposes enums and functions for the ng-template\r\n    public ChatParticipantStatus = ChatParticipantStatus;\r\n    public chatParticipantStatusDescriptor = chatParticipantStatusDescriptor;\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (this.currentActiveOption) {\r\n            const currentOptionTriggeredBy = this.currentActiveOption && this.currentActiveOption.chattingTo.participant.id;\r\n            const isActivatedUserInSelectedList = (this.selectedUsersFromFriendsList.filter(item => item.id == currentOptionTriggeredBy)).length > 0;\r\n\r\n            if (!isActivatedUserInSelectedList) {\r\n                this.selectedUsersFromFriendsList = this.selectedUsersFromFriendsList.concat(this.currentActiveOption.chattingTo.participant as User);\r\n            }\r\n        }\r\n    }\r\n\r\n    get filteredParticipants(): IChatParticipant[]\r\n    {\r\n        if (this.searchInput.length > 0){\r\n            // Searches in the friend list by the inputted search string\r\n            return this.participants.filter(x => x.displayName.toUpperCase().includes(this.searchInput.toUpperCase()));\r\n        }\r\n\r\n        return this.participants;\r\n    }\r\n\r\n    isUserSelectedFromFriendsList(user: User) : boolean\r\n    {\r\n        return (this.selectedUsersFromFriendsList.filter(item => item.id == user.id)).length > 0\r\n    }\r\n\r\n    unreadMessagesTotalByParticipant(participant: IChatParticipant): string\r\n    {\r\n        let openedWindow = this.windows.find(x => x.participant.id == participant.id);\r\n\r\n        if (openedWindow){\r\n            return MessageCounter.unreadMessagesTotal(openedWindow, this.userId);\r\n        }\r\n        else\r\n        {\r\n            let totalUnreadMessages = this.participantsResponse\r\n                .filter(x => x.participant.id == participant.id && !this.participantsInteractedWith.find(u => u.id == participant.id) && x.metadata && x.metadata.totalUnreadMessages > 0)\r\n                .map((participantResponse) => {\r\n                    return participantResponse.metadata.totalUnreadMessages\r\n                })[0];\r\n\r\n            return MessageCounter.formatUnreadMessagesTotal(totalUnreadMessages);\r\n        }\r\n    }\r\n\r\n    cleanUpUserSelection = () => this.selectedUsersFromFriendsList = [];\r\n\r\n    // Toggle friends list visibility\r\n    onChatTitleClicked(): void\r\n    {\r\n        this.isCollapsed = !this.isCollapsed;\r\n    }\r\n\r\n    onFriendsListCheckboxChange(selectedUser: any, isChecked: boolean): void//(selectedUser: User, isChecked: boolean): void\r\n    {\r\n        if(isChecked) {\r\n            this.selectedUsersFromFriendsList.push(selectedUser);\r\n        } \r\n        else \r\n        {\r\n            this.selectedUsersFromFriendsList.splice(this.selectedUsersFromFriendsList.indexOf(selectedUser), 1);\r\n        }\r\n    }\r\n\r\n    onUserClick(clickedUser: User): void\r\n    {\r\n        this.onParticipantClicked.emit(clickedUser);\r\n    }\r\n\r\n    onFriendsListActionCancelClicked(): void\r\n    {\r\n        this.onOptionPromptCanceled.emit();\r\n        this.cleanUpUserSelection();\r\n    }\r\n\r\n    onFriendsListActionConfirmClicked() : void\r\n    {\r\n        this.onOptionPromptConfirmed.emit(this.selectedUsersFromFriendsList);\r\n        this.cleanUpUserSelection();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}