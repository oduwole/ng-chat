{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\n/*\r\n * Transforms text containing URLs or E-mails to valid links/mailtos\r\n*/\nexport class LinkfyPipe {\n  transform(message, pipeEnabled) {\n    if (pipeEnabled && message && message.length > 1) {\n      let replacedText;\n      let replacePatternProtocol;\n      let replacePatternWWW;\n      let replacePatternMailTo;\n      // URLs starting with http://, https://, or ftp://\n      replacePatternProtocol = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n      replacedText = message.replace(replacePatternProtocol, '<a href=\"$1\" target=\"_blank\">$1</a>');\n      // URLs starting with \"www.\" (ignoring // before it).\n      replacePatternWWW = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n      replacedText = replacedText.replace(replacePatternWWW, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n      // Change email addresses to mailto:: links.\n      replacePatternMailTo = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n      replacedText = replacedText.replace(replacePatternMailTo, '<a href=\"mailto:$1\">$1</a>');\n      return replacedText;\n    } else return message;\n  }\n}\n_class = LinkfyPipe;\n_class.ɵfac = function LinkfyPipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"linkfy\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["LinkfyPipe","transform","message","pipeEnabled","length","replacedText","replacePatternProtocol","replacePatternWWW","replacePatternMailTo","replace","pure"],"sources":["D:\\VS Project\\ng-chat\\src\\ng-chat\\pipes\\linkfy.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Transforms text containing URLs or E-mails to valid links/mailtos\r\n*/\r\n@Pipe({name: 'linkfy'})\r\nexport class LinkfyPipe implements PipeTransform {\r\n    transform(message: string, pipeEnabled: boolean): string {\r\n        if (pipeEnabled && message && message.length > 1)\r\n        {\r\n            let replacedText;\r\n            let replacePatternProtocol;\r\n            let replacePatternWWW;\r\n            let replacePatternMailTo;\r\n\r\n            // URLs starting with http://, https://, or ftp://\r\n            replacePatternProtocol = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\r\n            replacedText = message.replace(replacePatternProtocol, '<a href=\"$1\" target=\"_blank\">$1</a>');\r\n\r\n            // URLs starting with \"www.\" (ignoring // before it).\r\n            replacePatternWWW = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\r\n            replacedText = replacedText.replace(replacePatternWWW, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\r\n\r\n            // Change email addresses to mailto:: links.\r\n            replacePatternMailTo = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\r\n            replacedText = replacedText.replace(replacePatternMailTo, '<a href=\"mailto:$1\">$1</a>');\r\n\r\n            return replacedText;\r\n        }\r\n        else\r\n            return message;\r\n    } \r\n}\r\n"],"mappings":";;AAEA;;;AAIA,OAAM,MAAOA,UAAU;EACnBC,SAASA,CAACC,OAAe,EAAEC,WAAoB;IAC3C,IAAIA,WAAW,IAAID,OAAO,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAChD;MACI,IAAIC,YAAY;MAChB,IAAIC,sBAAsB;MAC1B,IAAIC,iBAAiB;MACrB,IAAIC,oBAAoB;MAExB;MACAF,sBAAsB,GAAG,yEAAyE;MAClGD,YAAY,GAAGH,OAAO,CAACO,OAAO,CAACH,sBAAsB,EAAE,qCAAqC,CAAC;MAE7F;MACAC,iBAAiB,GAAG,gCAAgC;MACpDF,YAAY,GAAGA,YAAY,CAACI,OAAO,CAACF,iBAAiB,EAAE,8CAA8C,CAAC;MAEtG;MACAC,oBAAoB,GAAG,0DAA0D;MACjFH,YAAY,GAAGA,YAAY,CAACI,OAAO,CAACD,oBAAoB,EAAE,4BAA4B,CAAC;MAEvF,OAAOH,YAAY;KACtB,MAEG,OAAOH,OAAO;EACtB;;SAzBSF,UAAU;;mBAAVA,MAAU;AAAA;;;QAAVA,MAAU;EAAAU,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}