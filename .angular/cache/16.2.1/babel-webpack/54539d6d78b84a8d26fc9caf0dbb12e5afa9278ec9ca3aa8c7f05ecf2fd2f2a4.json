{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nlet emojiDictionary = [{\n  patterns: [':)', ':-)', '=)'],\n  unicode: '😃'\n}, {\n  patterns: [':D', ':-D', '=D'],\n  unicode: '😀'\n}, {\n  patterns: [':(', ':-(', '=('],\n  unicode: '🙁'\n}, {\n  patterns: [':|', ':-|', '=|'],\n  unicode: '😐'\n}, {\n  patterns: [':*', ':-*', '=*'],\n  unicode: '😙'\n}, {\n  patterns: ['T_T', 'T.T'],\n  unicode: '😭'\n}, {\n  patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'],\n  unicode: '😮'\n}, {\n  patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'],\n  unicode: '😋'\n}, {\n  patterns: ['>.<'],\n  unicode: '😣'\n}, {\n  patterns: ['@.@'],\n  unicode: '😵'\n}, {\n  patterns: ['*.*'],\n  unicode: '😍'\n}, {\n  patterns: ['<3'],\n  unicode: '❤️'\n}, {\n  patterns: ['^.^'],\n  unicode: '😊'\n}, {\n  patterns: [':+1'],\n  unicode: '👍'\n}, {\n  patterns: [':-1'],\n  unicode: '👎'\n}];\n/*\r\n * Transforms common emoji text to UTF encoded emojis\r\n*/\nexport class EmojifyPipe {\n  transform(message, pipeEnabled) {\n    if (pipeEnabled && message && message.length > 1) {\n      emojiDictionary.forEach(emoji => {\n        emoji.patterns.forEach(pattern => {\n          message = message.replace(pattern, emoji.unicode);\n        });\n      });\n    }\n    return message;\n  }\n}\n_class = EmojifyPipe;\n_class.ɵfac = function EmojifyPipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"emojify\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["emojiDictionary","patterns","unicode","EmojifyPipe","transform","message","pipeEnabled","length","forEach","emoji","pattern","replace","pure"],"sources":["D:\\VS Project\\ng-chat\\src\\ng-chat\\pipes\\emojify.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nlet emojiDictionary = [\r\n    { patterns: [':)', ':-)', '=)'], unicode: '😃' },\r\n    { patterns: [':D', ':-D', '=D'], unicode: '😀' },\r\n    { patterns: [':(', ':-(', '=('], unicode: '🙁' },\r\n    { patterns: [':|', ':-|', '=|'], unicode: '😐' },\r\n    { patterns: [':*', ':-*', '=*'], unicode: '😙' },\r\n    { patterns: ['T_T', 'T.T'], unicode: '😭' },\r\n    { patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'], unicode: '😮' },\r\n    { patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'], unicode: '😋' },\r\n    { patterns: ['>.<'], unicode: '😣' },\r\n    { patterns: ['@.@'], unicode: '😵' },\r\n    { patterns: ['*.*'], unicode: '😍' },\r\n    { patterns: ['<3'], unicode: '❤️' },\r\n    { patterns: ['^.^'], unicode: '😊' },\r\n    { patterns: [':+1'], unicode: '👍' },\r\n    { patterns: [':-1'], unicode: '👎' }\r\n];\r\n\r\n/*\r\n * Transforms common emoji text to UTF encoded emojis\r\n*/\r\n@Pipe({name: 'emojify'})\r\nexport class EmojifyPipe implements PipeTransform {\r\n    transform(message: string, pipeEnabled: boolean): string {\r\n        if (pipeEnabled && message && message.length > 1) {  \r\n            emojiDictionary.forEach(emoji => {\r\n                emoji.patterns.forEach(pattern => {\r\n                    message = message.replace(pattern, emoji.unicode);\r\n                })\r\n            });\r\n        }\r\n\r\n    return message;\r\n  }\r\n}\r\n"],"mappings":";;AAEA,IAAIA,eAAe,GAAG,CAClB;EAAEC,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EAChD;EAAED,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EAChD;EAAED,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EAChD;EAAED,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EAChD;EAAED,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EAChD;EAAED,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EAC3C;EAAED,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EACnE;EAAED,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EACnE;EAAED,QAAQ,EAAE,CAAC,KAAK,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EACpC;EAAED,QAAQ,EAAE,CAAC,KAAK,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EACpC;EAAED,QAAQ,EAAE,CAAC,KAAK,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EACpC;EAAED,QAAQ,EAAE,CAAC,IAAI,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EACnC;EAAED,QAAQ,EAAE,CAAC,KAAK,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EACpC;EAAED,QAAQ,EAAE,CAAC,KAAK,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,EACpC;EAAED,QAAQ,EAAE,CAAC,KAAK,CAAC;EAAEC,OAAO,EAAE;AAAI,CAAE,CACvC;AAED;;;AAIA,OAAM,MAAOC,WAAW;EACpBC,SAASA,CAACC,OAAe,EAAEC,WAAoB;IAC3C,IAAIA,WAAW,IAAID,OAAO,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;MAC9CP,eAAe,CAACQ,OAAO,CAACC,KAAK,IAAG;QAC5BA,KAAK,CAACR,QAAQ,CAACO,OAAO,CAACE,OAAO,IAAG;UAC7BL,OAAO,GAAGA,OAAO,CAACM,OAAO,CAACD,OAAO,EAAED,KAAK,CAACP,OAAO,CAAC;QACrD,CAAC,CAAC;MACN,CAAC,CAAC;;IAGV,OAAOG,OAAO;EAChB;;SAXWF,WAAW;;mBAAXA,MAAW;AAAA;;;QAAXA,MAAW;EAAAS,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}