{"ast":null,"code":"export class DefaultFileUploadAdapter {\n  /**\r\n   * @summary Basic file upload adapter implementation for HTTP request form file consumption\r\n   * @param _serverEndpointUrl The API endpoint full qualified address that will receive a form file to process and return the metadata.\r\n   */\n  constructor(_serverEndpointUrl, _http) {\n    this._serverEndpointUrl = _serverEndpointUrl;\n    this._http = _http;\n  }\n  uploadFile(file, participantId) {\n    const formData = new FormData();\n    //formData.append('ng-chat-sender-userid', currentUserId);\n    formData.append('ng-chat-participant-id', participantId);\n    formData.append('file', file, file.name);\n    return this._http.post(this._serverEndpointUrl, formData);\n    // TODO: Leaving this if we want to track upload progress in detail in the future. Might need a different Subject generic type wrapper\n    // const fileRequest = new HttpRequest('POST', this._serverEndpointUrl, formData, {\n    //     reportProgress: true\n    // });\n    // const uploadProgress = new Subject<number>();\n    // const uploadStatus = uploadProgress.asObservable();\n    //const responsePromise = new Subject<Message>();\n    // this._http\n    //     .request(fileRequest)\n    //     .subscribe(event => {\n    //         // if (event.type == HttpEventType.UploadProgress)\n    //         // {\n    //         //     const percentDone = Math.round(100 * event.loaded / event.total);\n    //         //     uploadProgress.next(percentDone);\n    //         // }\n    //         // else if (event instanceof HttpResponse)\n    //         // {\n    //         //     uploadProgress.complete();\n    //         // }\n    //     });\n  }\n}","map":{"version":3,"names":["DefaultFileUploadAdapter","constructor","_serverEndpointUrl","_http","uploadFile","file","participantId","formData","FormData","append","name","post"],"sources":["D:\\VS Project\\ng-chat\\src\\ng-chat\\core\\default-file-upload-adapter.ts"],"sourcesContent":["import { IFileUploadAdapter } from './file-upload-adapter';\r\nimport { HttpClient, HttpRequest, HttpEventType, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { User } from './user';\r\nimport { Message } from './message';\r\n\r\nexport class DefaultFileUploadAdapter implements IFileUploadAdapter\r\n{\r\n    /**\r\n     * @summary Basic file upload adapter implementation for HTTP request form file consumption\r\n     * @param _serverEndpointUrl The API endpoint full qualified address that will receive a form file to process and return the metadata.\r\n     */\r\n    constructor(private _serverEndpointUrl: string, private _http: HttpClient) {\r\n    }\r\n\r\n    uploadFile(file: File, participantId: any): Observable<Message> {\r\n        const formData: FormData = new FormData();\r\n\r\n        //formData.append('ng-chat-sender-userid', currentUserId);\r\n        formData.append('ng-chat-participant-id', participantId);\r\n        formData.append('file', file, file.name);\r\n\r\n        return this._http.post<Message>(this._serverEndpointUrl, formData);\r\n\r\n        // TODO: Leaving this if we want to track upload progress in detail in the future. Might need a different Subject generic type wrapper\r\n        // const fileRequest = new HttpRequest('POST', this._serverEndpointUrl, formData, {\r\n        //     reportProgress: true\r\n        // });\r\n\r\n        // const uploadProgress = new Subject<number>();\r\n        // const uploadStatus = uploadProgress.asObservable();\r\n\r\n        //const responsePromise = new Subject<Message>();\r\n\r\n        // this._http\r\n        //     .request(fileRequest)\r\n        //     .subscribe(event => {\r\n        //         // if (event.type == HttpEventType.UploadProgress)\r\n        //         // {\r\n        //         //     const percentDone = Math.round(100 * event.loaded / event.total);\r\n\r\n        //         //     uploadProgress.next(percentDone);\r\n        //         // }\r\n        //         // else if (event instanceof HttpResponse)\r\n        //         // {\r\n                    \r\n        //         //     uploadProgress.complete();\r\n        //         // }\r\n        //     });\r\n    }\r\n}\r\n"],"mappings":"AAMA,OAAM,MAAOA,wBAAwB;EAEjC;;;;EAIAC,YAAoBC,kBAA0B,EAAUC,KAAiB;IAArD,KAAAD,kBAAkB,GAAlBA,kBAAkB;IAAkB,KAAAC,KAAK,GAALA,KAAK;EAC7D;EAEAC,UAAUA,CAACC,IAAU,EAAEC,aAAkB;IACrC,MAAMC,QAAQ,GAAa,IAAIC,QAAQ,EAAE;IAEzC;IACAD,QAAQ,CAACE,MAAM,CAAC,wBAAwB,EAAEH,aAAa,CAAC;IACxDC,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,EAAEA,IAAI,CAACK,IAAI,CAAC;IAExC,OAAO,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAU,IAAI,CAACT,kBAAkB,EAAEK,QAAQ,CAAC;IAElE;IACA;IACA;IACA;IAEA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;EACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}